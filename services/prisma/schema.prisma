// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(20)
  role               Role                 @relation(fields: [roleId], references: [id])
  roleId             Int                  @map("role_id")
  email              String               @unique @db.VarChar(50)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  SessionParticipant SessionParticipant[]
  Session            Session[]
  Credential         Credential[]

  @@map("users")
}

model Role {
  id    Int    @id @unique
  name  String @unique
  Users User[]

  @@map("roles")
}

model MeetingRoom {
  id              Int       @id @default(autoincrement())
  seatingQuantity Int       @map("seating_quantity")
  direction       String    @unique
  roomCode        String    @unique @map("room_code")
  seatings        Seating[]
  Session         Session[]

  @@map("meeting_rooms")
}

model Seating {
  id                 Int                  @id @default(autoincrement())
  MeetingRoom        MeetingRoom          @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId      Int                  @map("meeting_room_id")
  SessionParticipant SessionParticipant[]

  @@map("seatings")
}

model Session {
  id                 String               @id @default(ulid())
  title              String               @db.VarChar(50)
  startAt            DateTime             @map("start_at")
  endAt              DateTime             @map("end_at")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  meetingRoom        MeetingRoom          @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId      Int                  @map("meeting_room_id")
  user               User                 @relation(onDelete: Restrict, fields: [createdBy], references: [id])
  createdBy          String               @map("created_by")
  SessionParticipant SessionParticipant[]

  @@map("sessions")
}

model SessionParticipant {
  id          String  @id @default(ulid())
  session     Session @relation(fields: [sesssionId], references: [id])
  sesssionId  String  @map("session_id")
  seating     Seating @relation(fields: [seatingId], references: [id])
  seatingId   Int     @map("seating_id")
  token       String  @unique @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @map("user_id")
  haveConfirm Boolean @default(false) @map("have_confirm")

  @@map("session_participants")
}

model Credential {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  passwordHash String   @map("password_hash")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("credentials")
}
